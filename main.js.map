{"version":3,"sources":["./src/environments/environment.ts","./src/app/contacts/create-update/create-update.component.ts","./src/app/contacts/create-update/create-update.component.html","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/contacts/list/list.component.ts","./src/app/contacts/list/list.component.html","./src/app/contacts/contacts.service.ts","./src/app/app-routing.module.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { Component, Inject, OnInit, Output, EventEmitter } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA} from '@angular/material/dialog';\n\nimport { ContactsService } from '../contacts.service';\n\nexport interface ContactElement {\n  id: number,\n  firstName: string,\n  lastName: string,\n  email: string,\n  phone: string,\n  status: string\n}\n\n@Component({\n  selector: 'app-create-update',\n  templateUrl: './create-update.component.html',\n  styleUrls: ['./create-update.component.scss']\n})\nexport class CreateUpdateComponent implements OnInit {\n\n\n  currentContact: ContactElement = {\n    id: 0,\n    firstName: '',\n    lastName: '',\n    email: '',\n    phone: '',\n    status: ''\n  };\n  formTitle = 'New Contact';\n  editMode = false;\n  constructor(\n    public dialogRef: MatDialogRef<CreateUpdateComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: any,\n    private contactService: ContactsService) {}\n    \n    ngOnInit(): void {\n      if (this.data && this.data.add) {\n        this.currentContact.id = this.data.add;\n        this.editMode = false;\n      } else if (this.data && this.data.edit) {\n        this.currentContact = this.data.edit;\n        this.editMode = true;\n      }\n    }\n  onNoClick(): void {\n    this.dialogRef.close();\n  }\n\n  saveContact(): boolean {\n    if (!this.currentContact.firstName || !this.currentContact.email) {\n      return false;\n    }\n    if (!this.editMode) {\n      this.currentContact.status = this.contactService.status[0];\n      this.dialogRef.close({add: this.currentContact});\n    } else {\n      this.dialogRef.close({edit: this.currentContact});\n    }\n    return true;\n  }\n\n}\n","<h1 mat-dialog-title>{{formTitle}}</h1>\n<div mat-dialog-content>\n  <mat-form-field>\n    <mat-label>First Name</mat-label>\n    <input matInput required autofocus [(ngModel)]=\"currentContact.firstName\"/>\n  </mat-form-field>\n  <mat-form-field>\n      <mat-label>Last Name</mat-label>\n      <input matInput [(ngModel)]=\"currentContact.lastName\"/>\n    </mat-form-field>\n    <mat-form-field>\n        <mat-label> Email</mat-label>\n        <input matInput email required [(ngModel)]=\"currentContact.email\"/>\n    </mat-form-field>\n    <mat-form-field>\n        <mat-label>Phone</mat-label>\n        <input matInput [(ngModel)]=\"currentContact.phone\"/>\n    </mat-form-field>\n  \n</div>\n<div mat-dialog-actions>\n  <button mat-button (click)=\"onNoClick()\">Cancel </button>\n  <button mat-button (click)=\"saveContact()\"> Save</button>\n</div>","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'EHI';\n}\n","\n<div class=\"main-content\">\n  <router-outlet></router-outlet>\n</div>","import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { ListComponent } from './contacts/list/list.component';\nimport { CreateUpdateComponent } from './contacts/create-update/create-update.component';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatTableModule } from '@angular/material/table';\n\nimport { MatInputModule } from '@angular/material/input';\nimport { MatDialogModule, MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { FormsModule } from '@angular/forms';\nimport { ContactsService } from './contacts/contacts.service';\n\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    ListComponent,\n    CreateUpdateComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    BrowserAnimationsModule,\n    MatSliderModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatDialogModule,\n    FormsModule,\n    MatTableModule,\n  ],\n  providers: [\n    { provide: MAT_DIALOG_DATA, useValue: {} },\n    { provide: MatDialogRef, useValue: {} },\n    ContactsService,\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { ContactsService } from '../contacts.service';\nimport {MatDialog, MatDialogRef, MAT_DIALOG_DATA} from '@angular/material/dialog';\nimport { CreateUpdateComponent } from '../create-update/create-update.component';\n\n\nexport interface ContactElement {\n  id: number,\n  firstName: string,\n  lastName: string,\n  email: string,\n  phone: string,\n  status: string\n}\n\n\n@Component({\n  selector: 'app-list',\n  templateUrl: './list.component.html',\n  styleUrls: ['./list.component.scss']\n})\nexport class ListComponent implements OnInit {\n  title = '';\n  showContactForm = true;\n  contact: any;\n  dataSource: any;\n  constructor(public contactService: ContactsService, public dialog: MatDialog) {\n    this.updateList();\n  }\n  ngOnInit(): void {\n    this.title = 'Manage Contacts';\n  }\n  displayedColumns: string[] = ['id', 'firstName', 'lastName', 'email', 'edit', 'delete'];\n  tableHeaders = [\n    {id: 'id', label: 'Id'},\n    {id: 'firstName', label: 'First Name'},\n    {id: 'lastName', label: 'Last Name'},\n    {id: 'email', label: 'Email'},\n  ];\n  \n  openDialog(id = null): void {\n    let data;\n    if (id) {\n      data = this.contactService.contacts.filter((el: ContactElement) => {\n        return id === el.id;\n      });\n      data = {edit: data.pop()};\n    } else {\n      let id = 0;\n      this.contactService.contacts.forEach((el: any) => {\n        id = el.id > id ? el.id : id; \n      });\n      data = {add: ++id};\n    }\n    const dialogRef = this.dialog.open(CreateUpdateComponent, {\n      width: '350px',\n      data: data\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      if (result && result.add) {\n        this.contactService.contacts.push(result.add);\n        this.updateList();\n      } else if (result && result.edit) {\n        this.contactService.contacts.map((el: ContactElement) => {\n          if (el.id === result.edit.id) {\n            el = result.edit;\n          }\n        });\n        this.updateList();\n      }\n    });\n  }\n\n  deleteContact(id: number) {\n    this.contactService.contacts.map((el: ContactElement) => {\n      if (el.id === id) {\n        el.status = this.contactService.status[1];\n      }\n    });\n    this.updateList();\n  }\n\n  updateList() {\n    this.dataSource = this.contactService.contacts.filter((el: ContactElement) => {\n      return el.status === this.contactService.status[0];\n    });\n    this.contactService.updateStorage();\n  }\n}","<h1>\n    {{title}}\n    <button mat-raised-button color=\"primary\" (click)=\"openDialog()\" class=\"add-new-contact\">Add new contact</button>\n</h1>\n<hr>\n<table mat-table [dataSource]=\"dataSource\" class=\"mat-elevation-z8\">\n    <ng-container [matColumnDef]=\"column.id\" *ngFor=\"let column of tableHeaders\">\n        <th mat-header-cell *matHeaderCellDef> {{column.label}} </th>\n        <td mat-cell *matCellDef=\"let element\"> {{element[column.id]}} </td>\n    </ng-container>\n    <ng-container matColumnDef=\"edit\">\n        <th mat-header-cell *matHeaderCellDef> Edit </th>\n        <td mat-cell *matCellDef=\"let element\"> <button (click)=\"openDialog(element.id)\">Edit</button> </td>\n    </ng-container>\n    <ng-container matColumnDef=\"delete\">\n        <th mat-header-cell *matHeaderCellDef> Delete </th>\n        <td mat-cell *matCellDef=\"let element\"> <button (click)=\"deleteContact(element.id)\">Delete</button> </td>\n    </ng-container>\n    <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n  <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n</table>","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ContactsService {\n  contacts: any;\n  status = ['Active', 'Inactive'];\n  constructor() {\n    if(localStorage.contacts) {\n      this.contacts = this.getContactsStorage();\n    } else {\n      this.contacts = [\n        {\n          id: 1,\n          firstName: 'Mahesh',\n          lastName: 'Kajale',\n          email: 'xyz@gmail.com',\n          phone: '1234567890',\n          status: this.status[0]\n        },\n        {\n          id: 2,\n          firstName: 'm1',\n          lastName: 'k1',\n          email: 'xyz1@gmail.com',\n          phone: '1234567890',\n          status: this.status[1]\n        },\n        {\n          id: 3,\n          firstName: 'm2',\n          lastName: 'k2',\n          email: 'xyz2@gmail.com',\n          phone: '1234567890',\n          status: this.status[0]\n        },\n      ];\n      this.updateStorage();\n    }\n  }\n\n  getContactsStorage() {\n    return JSON.parse(localStorage.contacts);\n  }\n\n  updateStorage() {\n    localStorage.contacts = JSON.stringify(this.contacts);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { CreateUpdateComponent } from './contacts/create-update/create-update.component';\nimport { ListComponent } from './contacts/list/list.component';\n\nconst routes: Routes = [\n  {path: '', component: ListComponent},\n  {path: 'edit/:id', component: CreateUpdateComponent},\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}